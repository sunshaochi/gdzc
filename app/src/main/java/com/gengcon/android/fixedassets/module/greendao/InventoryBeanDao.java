package com.gengcon.android.fixedassets.module.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVENTORY_BEAN".
*/
public class InventoryBeanDao extends AbstractDao<InventoryBean, Long> {

    public static final String TABLENAME = "INVENTORY_BEAN";

    /**
     * Properties of entity InventoryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tag = new Property(1, String.class, "tag", false, "TAG");
        public final static Property Pd_no = new Property(2, String.class, "pd_no", false, "PD_NO");
        public final static Property Pd_name = new Property(3, String.class, "pd_name", false, "PD_NAME");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
        public final static Property Audit_userid = new Property(5, Integer.class, "audit_userid", false, "AUDIT_USERID");
        public final static Property Created_userid = new Property(6, Integer.class, "created_userid", false, "CREATED_USERID");
        public final static Property Created_at = new Property(7, String.class, "created_at", false, "CREATED_AT");
        public final static Property Remarks = new Property(8, String.class, "remarks", false, "REMARKS");
        public final static Property Wp_num = new Property(9, Integer.class, "wp_num", false, "WP_NUM");
        public final static Property Yp_num = new Property(10, Integer.class, "yp_num", false, "YP_NUM");
        public final static Property Py_num = new Property(11, Integer.class, "py_num", false, "PY_NUM");
        public final static Property Asset_updated_at = new Property(12, String.class, "asset_updated_at", false, "ASSET_UPDATED_AT");
        public final static Property Created_username = new Property(13, String.class, "created_username", false, "CREATED_USERNAME");
        public final static Property Audit_username = new Property(14, String.class, "audit_username", false, "AUDIT_USERNAME");
        public final static Property Status_cn = new Property(15, String.class, "status_cn", false, "STATUS_CN");
        public final static Property Son_status = new Property(16, Integer.class, "son_status", false, "SON_STATUS");
        public final static Property IsUpdate = new Property(17, Integer.class, "isUpdate", false, "IS_UPDATE");
        public final static Property User_id = new Property(18, String.class, "user_id", false, "USER_ID");
    }


    public InventoryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public InventoryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVENTORY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TAG\" TEXT UNIQUE ," + // 1: tag
                "\"PD_NO\" TEXT," + // 2: pd_no
                "\"PD_NAME\" TEXT," + // 3: pd_name
                "\"STATUS\" INTEGER," + // 4: status
                "\"AUDIT_USERID\" INTEGER," + // 5: audit_userid
                "\"CREATED_USERID\" INTEGER," + // 6: created_userid
                "\"CREATED_AT\" TEXT," + // 7: created_at
                "\"REMARKS\" TEXT," + // 8: remarks
                "\"WP_NUM\" INTEGER," + // 9: wp_num
                "\"YP_NUM\" INTEGER," + // 10: yp_num
                "\"PY_NUM\" INTEGER," + // 11: py_num
                "\"ASSET_UPDATED_AT\" TEXT," + // 12: asset_updated_at
                "\"CREATED_USERNAME\" TEXT," + // 13: created_username
                "\"AUDIT_USERNAME\" TEXT," + // 14: audit_username
                "\"STATUS_CN\" TEXT," + // 15: status_cn
                "\"SON_STATUS\" INTEGER," + // 16: son_status
                "\"IS_UPDATE\" INTEGER," + // 17: isUpdate
                "\"USER_ID\" TEXT);"); // 18: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVENTORY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InventoryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(2, tag);
        }
 
        String pd_no = entity.getPd_no();
        if (pd_no != null) {
            stmt.bindString(3, pd_no);
        }
 
        String pd_name = entity.getPd_name();
        if (pd_name != null) {
            stmt.bindString(4, pd_name);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        Integer audit_userid = entity.getAudit_userid();
        if (audit_userid != null) {
            stmt.bindLong(6, audit_userid);
        }
 
        Integer created_userid = entity.getCreated_userid();
        if (created_userid != null) {
            stmt.bindLong(7, created_userid);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(8, created_at);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(9, remarks);
        }
 
        Integer wp_num = entity.getWp_num();
        if (wp_num != null) {
            stmt.bindLong(10, wp_num);
        }
 
        Integer yp_num = entity.getYp_num();
        if (yp_num != null) {
            stmt.bindLong(11, yp_num);
        }
 
        Integer py_num = entity.getPy_num();
        if (py_num != null) {
            stmt.bindLong(12, py_num);
        }
 
        String asset_updated_at = entity.getAsset_updated_at();
        if (asset_updated_at != null) {
            stmt.bindString(13, asset_updated_at);
        }
 
        String created_username = entity.getCreated_username();
        if (created_username != null) {
            stmt.bindString(14, created_username);
        }
 
        String audit_username = entity.getAudit_username();
        if (audit_username != null) {
            stmt.bindString(15, audit_username);
        }
 
        String status_cn = entity.getStatus_cn();
        if (status_cn != null) {
            stmt.bindString(16, status_cn);
        }
 
        Integer son_status = entity.getSon_status();
        if (son_status != null) {
            stmt.bindLong(17, son_status);
        }
 
        Integer isUpdate = entity.getIsUpdate();
        if (isUpdate != null) {
            stmt.bindLong(18, isUpdate);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(19, user_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InventoryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(2, tag);
        }
 
        String pd_no = entity.getPd_no();
        if (pd_no != null) {
            stmt.bindString(3, pd_no);
        }
 
        String pd_name = entity.getPd_name();
        if (pd_name != null) {
            stmt.bindString(4, pd_name);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        Integer audit_userid = entity.getAudit_userid();
        if (audit_userid != null) {
            stmt.bindLong(6, audit_userid);
        }
 
        Integer created_userid = entity.getCreated_userid();
        if (created_userid != null) {
            stmt.bindLong(7, created_userid);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(8, created_at);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(9, remarks);
        }
 
        Integer wp_num = entity.getWp_num();
        if (wp_num != null) {
            stmt.bindLong(10, wp_num);
        }
 
        Integer yp_num = entity.getYp_num();
        if (yp_num != null) {
            stmt.bindLong(11, yp_num);
        }
 
        Integer py_num = entity.getPy_num();
        if (py_num != null) {
            stmt.bindLong(12, py_num);
        }
 
        String asset_updated_at = entity.getAsset_updated_at();
        if (asset_updated_at != null) {
            stmt.bindString(13, asset_updated_at);
        }
 
        String created_username = entity.getCreated_username();
        if (created_username != null) {
            stmt.bindString(14, created_username);
        }
 
        String audit_username = entity.getAudit_username();
        if (audit_username != null) {
            stmt.bindString(15, audit_username);
        }
 
        String status_cn = entity.getStatus_cn();
        if (status_cn != null) {
            stmt.bindString(16, status_cn);
        }
 
        Integer son_status = entity.getSon_status();
        if (son_status != null) {
            stmt.bindLong(17, son_status);
        }
 
        Integer isUpdate = entity.getIsUpdate();
        if (isUpdate != null) {
            stmt.bindLong(18, isUpdate);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(19, user_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InventoryBean readEntity(Cursor cursor, int offset) {
        InventoryBean entity = new InventoryBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pd_no
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pd_name
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // audit_userid
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // created_userid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // created_at
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // remarks
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // wp_num
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // yp_num
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // py_num
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // asset_updated_at
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // created_username
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // audit_username
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // status_cn
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // son_status
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // isUpdate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // user_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InventoryBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPd_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPd_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAudit_userid(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCreated_userid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCreated_at(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemarks(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWp_num(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setYp_num(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setPy_num(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setAsset_updated_at(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreated_username(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAudit_username(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStatus_cn(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSon_status(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setIsUpdate(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setUser_id(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InventoryBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InventoryBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InventoryBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
